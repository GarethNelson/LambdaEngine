Modules
  Move more components into external libs
    Menu renderer for example should be possible to patch/mod

Menu system
  Implement hooks
  Move all menu item data into stage_vals
  Setup param system (similar to l_loadscreen)
  Implement options menu
  Create INIT_OPTIONS_MENU state seperate from INIT_MAIN_MENU state
    Both states must init the menu system itself

Tiling renderer

Texture system
  texture names may be VFS filepaths, or arbitary strings (for dynamic textures)
  methods
    get texture
     return a texture from cache, or if not found there load it to cache and upload to GPU
    delete texture
     delete a texture from cache and remove it from the GPU

Font system
  Hashtable of (fontname,size) as key, array of glyph textures as value
  Render into texture cache - return a unique ID for rendering
    Should NOT do perframe for obvious reasons
    Render textures at stage setup and store into texture cache

Map compiler
  So we can compile .def files into binary structs and pseudo mmap() them
    For the win

Modify FSM to pass parameters to stages
  e.g list of files to cache in loadscreen, or map to load in ingame etc

After all core modules are in place, document the API and refactor

Fullscreen flag

Isolate SDL into seperate module
  move all SDL-specific code into hooks
    e.g video_init() should run a platform_video_init_glcontext() hook which SDL module registers a callback on
    SDL_PumpEvents() and SDL_GL_SwapWindow() should be moved into video_post_render hook callbacks

module hooks system
  List hooks in dlsym API header file using macro to define function add_hook_whatever and run_hook_whatever
     e.g add_hook_video_pre_render
  Each hook is a function that takes a pointer (void*) as param
    The pointer may be void, otherwise it should be a pointer to a struct typedef defined in the dlsym API header
  Modules may add their own callbacks using add_hook_whatever
  Modules (and main engine core) may run all registered callbacks using run_hook_whatever
  Each hook holds an array of callbacks of a certain max size
  run_hook_whatever() simply iterates through the array until a NULL pointer is found
    therefore order of adding callbacks is important
   
VFS cache
  Internal hashtable of VFS filenames mapping to sizes and content
  Global assets
    Files which are never unloaded once in the cache
    Linked list of global assets is stored for checking all globals
  Temp assets
    Files which can be unloaded from the cache at any time
    Linked list of temp assets is stored to make cleanup simpler
  Methods:
    Get file content
     If the file requested is not in the cache, file will be loaded from VFS
    Get file length
    Store in cache (for use by loading screen)
    Mark as global
      Mark a file as a global asset
      Updates linked lists to ensure global assets are not in temp asset list
       Marking a temp asset as global results in removing it from the temp assets list
    Mark as temp
      Mark a file as a temp asset
      Updates linked lists to ensure global assets are not in temp asset list
       Attempting to mark a global asset as temp is a NOP
    Cleanup
      Evicts all temp assets from the cache - useful for map changes

Texture manager
  Methods:
     load texture   - loads texture from VFS cache and sends to the GPU ready for use
     unload texture - unloads the texture from the GPU
     unload all     - unloads all textures from the GPU - should be run between maps and FSM stages
     get texture    - returns the texture ID for a loaded texture by given filename if loaded
                      if not loaded, attempts to load
