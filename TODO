TODO in lambdamc
  Add collision map to mapinfo.def

Console system
  Swap all printf() for an internal function
  Add hook for "all keyboard input" to input module
  Add render hooks to render the console if currently active and to capture keyboard input

Tools
  lambdamc         - toplevel map compiler, invokes other tools
    map compiler process finally spits out a .c file that includes all headers
    C file has a $mapname_init function (e.g map01_init) that sets up relevant hooks and a $mapname_close() function
  lambdacut        - cut a tile out of a larger image
    takes params tileres_w, tileres_h, tile_x, tile_y
     optionally takes just tileres_w,tileres_h and outputs all tiles into a directory
     also outputs a visual.def
  lambdaextractcol - extract a list of tiles that are in the collision map
     takes collision map colour triplet as params (r,g,b)
     takes a list of tile IDs and filenames on stdin or from a specified file (basically visual.def)
     outputs a collision.def
      Need to make this an actual filter
  lambdaextractent - extract a list of entity spawn points from an entity map
     takes entity colour triplet and filename as params (r,g,b)
     outputs an entities.def
  lambdaextracthz  - extract hotzone rectangle coordinates from a hotzone map
     takes hotzone colour triplet as params (r,g,b) and filename
     outputs hotzones.def
  lambdagenent     - generate C header file with spawn points of entities and appropriate hooks
     takes entities.def as input
     prints the generated C header to stdout (or to a specified file)
  lambdagencol     - generate C header file with function to check for collisions with the collision map
     takes collision.def as input
     prints the generated C header to stdout (or to a specified file)
      function takes world co-ordinates, checks if they're in a collision map tile and then checks for actual collision
  lambdagenhz      - generate C header file with rectangle coordinates of hotzones and collision check hooks
     takes hotzones.def as input
     prints the generated C header to stdout (or to a specified file)
      generated header provides hooks for each hotzone

Create sample game in core02.pak
  Simple test maps map01 + map02
  Game logic
    Entity 1 - player
     Hooks keyboard inputs to walk around between tiles
    Entity 2 - button
     Hooks action button
      If action is pressed while player is near the button, jump back to map01 from map02
    Simple obstacle course
    Hotzone on map01 that jumps to map02

Modules
  Move more components into external libs
    Menu renderer for example should be possible to patch/mod

Menu system
  Implement hooks
  Move all menu item data into stage_vals
  Setup param system (similar to l_loadscreen)
  Implement options menu
  Create INIT_OPTIONS_MENU state seperate from INIT_MAIN_MENU state
    Both states must init the menu system itself

Tiling renderer
  Scene definition:
   tile_w (in pixels)
   tile_h (in pixels)
   map_w  (in tiles)
   map_h  (in tiles)
   2D array
      tile texture ID
      tile contains hotzone - if any part of this tile contains a hotzone, 1
      tile contains obstacle - if any part of this tile contains an obstacle (as in collision map)
      pointer to entity occupying this tile (or NULL)
  render algorithm:
   calculate screen_w and screen_h in tiles
    screen_w_tiles,screen_h_tiles
   calculate subset of tiles to render based on camera
     camera defined by (cam_x,cam_y) coordinates in tiles
     rectangle from (cam_x,cam_y) to (cam_x+screen_w_tiles,cam_y+screen_h_tiles)
      iterate through rectangle and draw relevant tile

Texture system
  texture names may be VFS filepaths, or arbitary strings (for dynamic textures)
  methods
    get texture
     return a texture from cache, or if not found there load it to cache and upload to GPU
    delete texture
     delete a texture from cache and remove it from the GPU

Font system
  Hashtable of (fontname,size) as key, array of glyph textures as value
  Render into texture cache - return a unique ID for rendering
    Should NOT do perframe for obvious reasons
    Render textures at stage setup and store into texture cache

Map compiler
  So we can compile .def files into binary structs and pseudo mmap() them
    For the win

Modify FSM to pass parameters to stages
  e.g list of files to cache in loadscreen, or map to load in ingame etc

After all core modules are in place, document the API and refactor

Fullscreen flag

Isolate SDL into seperate module
  move all SDL-specific code into hooks
    e.g video_init() should run a platform_video_init_glcontext() hook which SDL module registers a callback on
    SDL_PumpEvents() and SDL_GL_SwapWindow() should be moved into video_post_render hook callbacks

module hooks system
  List hooks in dlsym API header file using macro to define function add_hook_whatever and run_hook_whatever
     e.g add_hook_video_pre_render
  Each hook is a function that takes a pointer (void*) as param
    The pointer may be void, otherwise it should be a pointer to a struct typedef defined in the dlsym API header
  Modules may add their own callbacks using add_hook_whatever
  Modules (and main engine core) may run all registered callbacks using run_hook_whatever
  Each hook holds an array of callbacks of a certain max size
  run_hook_whatever() simply iterates through the array until a NULL pointer is found
    therefore order of adding callbacks is important
   
VFS cache
  Internal hashtable of VFS filenames mapping to sizes and content
  Global assets
    Files which are never unloaded once in the cache
    Linked list of global assets is stored for checking all globals
  Temp assets
    Files which can be unloaded from the cache at any time
    Linked list of temp assets is stored to make cleanup simpler
  Methods:
    Get file content
     If the file requested is not in the cache, file will be loaded from VFS
    Get file length
    Store in cache (for use by loading screen)
    Mark as global
      Mark a file as a global asset
      Updates linked lists to ensure global assets are not in temp asset list
       Marking a temp asset as global results in removing it from the temp assets list
    Mark as temp
      Mark a file as a temp asset
      Updates linked lists to ensure global assets are not in temp asset list
       Attempting to mark a global asset as temp is a NOP
    Cleanup
      Evicts all temp assets from the cache - useful for map changes

Texture manager
  Methods:
     load texture   - loads texture from VFS cache and sends to the GPU ready for use
     unload texture - unloads the texture from the GPU
     unload all     - unloads all textures from the GPU - should be run between maps and FSM stages
     get texture    - returns the texture ID for a loaded texture by given filename if loaded
                      if not loaded, attempts to load
